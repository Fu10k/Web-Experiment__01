"use strict";
self["webpackHotUpdateweb_experiment_1"]("main",{

/***/ "./shared/shaders/blob-vertex.glsl":
/*!*****************************************!*\
  !*** ./shared/shaders/blob-vertex.glsl ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("#define GLSLIFY 1\nattribute vec4 tangent;\n\nvarying float vPattern;\n\nuniform float uTime;\nuniform float uSpeed;\nuniform float uNoiseStrength;\nuniform float uDisplacementStrength;\nuniform float uFractAmount;\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson (https://github.com/stegu/webgl-noise)\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nfloat smoothMod(float axis, float amp, float rad) {\n    float top = cos(PI * (axis / amp)) * sin(PI * (axis / amp));\n    float bottom = pow(sin(PI * (axis / amp)), 2.0) + pow(rad, 2.0);\n    float at = atan(top / bottom);\n    return amp * (1.0 / 2.0) - (1.0 / PI) * at;\n}\n\nfloat getDisplacement(vec3 position) {\n    vec3 pos = position;\n    pos.y -= uTime * 0.05 * uSpeed;\n    pos += cnoise(pos * 1.65) * uNoiseStrength;\n\n    return smoothMod(pos.y * uFractAmount, 1., 1.5) * uDisplacementStrength;\n}\n\nvoid main() {\n    vec3 biTangent = cross(csm_Normal, tangent.xyz);\n    float shift = 0.01;\n    vec3 posA = csm_Position + tangent.xyz * shift;\n    vec3 posB = csm_Position + biTangent * shift;\n\n    float pattern = getDisplacement(csm_Position);\n    vPattern = pattern;\n\n    csm_Position += csm_Normal * pattern;\n    posA += csm_Normal * getDisplacement(posA);\n    posB += csm_Normal * getDisplacement(posB);\n\n    vec3 toA = normalize(posA - csm_Position);\n    vec3 toB = normalize(posB - csm_Position);\n\n    csm_Normal = normalize(cross(toA, toB));\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("ce1f705c5f961f2bab44")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi45NGY3ZDZkOGZiNDI3N2M4ZDk1YS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxpRUFBZSwyQ0FBMkMsMkJBQTJCLHdCQUF3Qix1QkFBdUIsK0JBQStCLHNDQUFzQyw2QkFBNkIsMkhBQTJILHFDQUFxQyw2QkFBNkIsZ0RBQWdELHFCQUFxQixvQ0FBb0MseUJBQXlCLHlCQUF5Qiw0REFBNEQsNkNBQTZDLDBCQUEwQix5QkFBeUIsb0VBQW9FLHVFQUF1RSxtQ0FBbUMsd0JBQXdCLHdCQUF3QiwyQ0FBMkMsbUNBQW1DLG1DQUFtQyw0QkFBNEIsNkNBQTZDLHFCQUFxQiwrQ0FBK0Msb0NBQW9DLHdDQUF3Qyx3Q0FBd0MsNEJBQTRCLDZDQUE2QyxxQkFBcUIsK0NBQStDLG9DQUFvQyx3Q0FBd0Msd0NBQXdDLDBDQUEwQyx3Q0FBd0Msd0NBQXdDLHdDQUF3Qyx3Q0FBd0Msd0NBQXdDLHdDQUF3Qyx3Q0FBd0MsMkdBQTJHLG9CQUFvQixvQkFBb0Isb0JBQW9CLG9CQUFvQix5R0FBeUcsb0JBQW9CLG9CQUFvQixvQkFBb0Isb0JBQW9CLGtDQUFrQyxnREFBZ0Qsc0RBQXNELGdEQUFnRCxnREFBZ0Qsc0RBQXNELGdEQUFnRCxnQ0FBZ0MsZ0NBQWdDLDJGQUEyRixnREFBZ0QsbURBQW1ELHVCQUF1QixHQUFHLHVEQUF1RCxrRUFBa0Usc0VBQXNFLG9DQUFvQyxpREFBaUQsR0FBRywwQ0FBMEMsMEJBQTBCLHFDQUFxQyxpREFBaUQsZ0ZBQWdGLEdBQUcsaUJBQWlCLHNEQUFzRCx5QkFBeUIscURBQXFELG1EQUFtRCxzREFBc0QseUJBQXlCLDZDQUE2QyxpREFBaUQsaURBQWlELGtEQUFrRCxnREFBZ0QsZ0RBQWdELEdBQUcsQ0FBQzs7Ozs7Ozs7VUNBdjRIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLWV4cGVyaW1lbnQtMS8uL3NoYXJlZC9zaGFkZXJzL2Jsb2ItdmVydGV4Lmdsc2wiLCJ3ZWJwYWNrOi8vd2ViLWV4cGVyaW1lbnQtMS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbmF0dHJpYnV0ZSB2ZWM0IHRhbmdlbnQ7XFxuXFxudmFyeWluZyBmbG9hdCB2UGF0dGVybjtcXG5cXG51bmlmb3JtIGZsb2F0IHVUaW1lO1xcbnVuaWZvcm0gZmxvYXQgdVNwZWVkO1xcbnVuaWZvcm0gZmxvYXQgdU5vaXNlU3RyZW5ndGg7XFxudW5pZm9ybSBmbG9hdCB1RGlzcGxhY2VtZW50U3RyZW5ndGg7XFxudW5pZm9ybSBmbG9hdCB1RnJhY3RBbW91bnQ7XFxuXFxuLy9cXHRDbGFzc2ljIFBlcmxpbiAzRCBOb2lzZSBcXG4vL1xcdGJ5IFN0ZWZhbiBHdXN0YXZzb24gKGh0dHBzOi8vZ2l0aHViLmNvbS9zdGVndS93ZWJnbC1ub2lzZSlcXG4vL1xcbnZlYzQgcGVybXV0ZSh2ZWM0IHgpe3JldHVybiBtb2QoKCh4KjM0LjApKzEuMCkqeCwgMjg5LjApO31cXG52ZWM0IHRheWxvckludlNxcnQodmVjNCByKXtyZXR1cm4gMS43OTI4NDI5MTQwMDE1OSAtIDAuODUzNzM0NzIwOTUzMTQgKiByO31cXG52ZWMzIGZhZGUodmVjMyB0KSB7cmV0dXJuIHQqdCp0Kih0Kih0KjYuMC0xNS4wKSsxMC4wKTt9XFxuXFxuZmxvYXQgY25vaXNlKHZlYzMgUCl7XFxuICB2ZWMzIFBpMCA9IGZsb29yKFApOyAvLyBJbnRlZ2VyIHBhcnQgZm9yIGluZGV4aW5nXFxuICB2ZWMzIFBpMSA9IFBpMCArIHZlYzMoMS4wKTsgLy8gSW50ZWdlciBwYXJ0ICsgMVxcbiAgUGkwID0gbW9kKFBpMCwgMjg5LjApO1xcbiAgUGkxID0gbW9kKFBpMSwgMjg5LjApO1xcbiAgdmVjMyBQZjAgPSBmcmFjdChQKTsgLy8gRnJhY3Rpb25hbCBwYXJ0IGZvciBpbnRlcnBvbGF0aW9uXFxuICB2ZWMzIFBmMSA9IFBmMCAtIHZlYzMoMS4wKTsgLy8gRnJhY3Rpb25hbCBwYXJ0IC0gMS4wXFxuICB2ZWM0IGl4ID0gdmVjNChQaTAueCwgUGkxLngsIFBpMC54LCBQaTEueCk7XFxuICB2ZWM0IGl5ID0gdmVjNChQaTAueXksIFBpMS55eSk7XFxuICB2ZWM0IGl6MCA9IFBpMC56enp6O1xcbiAgdmVjNCBpejEgPSBQaTEuenp6ejtcXG5cXG4gIHZlYzQgaXh5ID0gcGVybXV0ZShwZXJtdXRlKGl4KSArIGl5KTtcXG4gIHZlYzQgaXh5MCA9IHBlcm11dGUoaXh5ICsgaXowKTtcXG4gIHZlYzQgaXh5MSA9IHBlcm11dGUoaXh5ICsgaXoxKTtcXG5cXG4gIHZlYzQgZ3gwID0gaXh5MCAvIDcuMDtcXG4gIHZlYzQgZ3kwID0gZnJhY3QoZmxvb3IoZ3gwKSAvIDcuMCkgLSAwLjU7XFxuICBneDAgPSBmcmFjdChneDApO1xcbiAgdmVjNCBnejAgPSB2ZWM0KDAuNSkgLSBhYnMoZ3gwKSAtIGFicyhneTApO1xcbiAgdmVjNCBzejAgPSBzdGVwKGd6MCwgdmVjNCgwLjApKTtcXG4gIGd4MCAtPSBzejAgKiAoc3RlcCgwLjAsIGd4MCkgLSAwLjUpO1xcbiAgZ3kwIC09IHN6MCAqIChzdGVwKDAuMCwgZ3kwKSAtIDAuNSk7XFxuXFxuICB2ZWM0IGd4MSA9IGl4eTEgLyA3LjA7XFxuICB2ZWM0IGd5MSA9IGZyYWN0KGZsb29yKGd4MSkgLyA3LjApIC0gMC41O1xcbiAgZ3gxID0gZnJhY3QoZ3gxKTtcXG4gIHZlYzQgZ3oxID0gdmVjNCgwLjUpIC0gYWJzKGd4MSkgLSBhYnMoZ3kxKTtcXG4gIHZlYzQgc3oxID0gc3RlcChnejEsIHZlYzQoMC4wKSk7XFxuICBneDEgLT0gc3oxICogKHN0ZXAoMC4wLCBneDEpIC0gMC41KTtcXG4gIGd5MSAtPSBzejEgKiAoc3RlcCgwLjAsIGd5MSkgLSAwLjUpO1xcblxcbiAgdmVjMyBnMDAwID0gdmVjMyhneDAueCxneTAueCxnejAueCk7XFxuICB2ZWMzIGcxMDAgPSB2ZWMzKGd4MC55LGd5MC55LGd6MC55KTtcXG4gIHZlYzMgZzAxMCA9IHZlYzMoZ3gwLnosZ3kwLnosZ3owLnopO1xcbiAgdmVjMyBnMTEwID0gdmVjMyhneDAudyxneTAudyxnejAudyk7XFxuICB2ZWMzIGcwMDEgPSB2ZWMzKGd4MS54LGd5MS54LGd6MS54KTtcXG4gIHZlYzMgZzEwMSA9IHZlYzMoZ3gxLnksZ3kxLnksZ3oxLnkpO1xcbiAgdmVjMyBnMDExID0gdmVjMyhneDEueixneTEueixnejEueik7XFxuICB2ZWMzIGcxMTEgPSB2ZWMzKGd4MS53LGd5MS53LGd6MS53KTtcXG5cXG4gIHZlYzQgbm9ybTAgPSB0YXlsb3JJbnZTcXJ0KHZlYzQoZG90KGcwMDAsIGcwMDApLCBkb3QoZzAxMCwgZzAxMCksIGRvdChnMTAwLCBnMTAwKSwgZG90KGcxMTAsIGcxMTApKSk7XFxuICBnMDAwICo9IG5vcm0wLng7XFxuICBnMDEwICo9IG5vcm0wLnk7XFxuICBnMTAwICo9IG5vcm0wLno7XFxuICBnMTEwICo9IG5vcm0wLnc7XFxuICB2ZWM0IG5vcm0xID0gdGF5bG9ySW52U3FydCh2ZWM0KGRvdChnMDAxLCBnMDAxKSwgZG90KGcwMTEsIGcwMTEpLCBkb3QoZzEwMSwgZzEwMSksIGRvdChnMTExLCBnMTExKSkpO1xcbiAgZzAwMSAqPSBub3JtMS54O1xcbiAgZzAxMSAqPSBub3JtMS55O1xcbiAgZzEwMSAqPSBub3JtMS56O1xcbiAgZzExMSAqPSBub3JtMS53O1xcblxcbiAgZmxvYXQgbjAwMCA9IGRvdChnMDAwLCBQZjApO1xcbiAgZmxvYXQgbjEwMCA9IGRvdChnMTAwLCB2ZWMzKFBmMS54LCBQZjAueXopKTtcXG4gIGZsb2F0IG4wMTAgPSBkb3QoZzAxMCwgdmVjMyhQZjAueCwgUGYxLnksIFBmMC56KSk7XFxuICBmbG9hdCBuMTEwID0gZG90KGcxMTAsIHZlYzMoUGYxLnh5LCBQZjAueikpO1xcbiAgZmxvYXQgbjAwMSA9IGRvdChnMDAxLCB2ZWMzKFBmMC54eSwgUGYxLnopKTtcXG4gIGZsb2F0IG4xMDEgPSBkb3QoZzEwMSwgdmVjMyhQZjEueCwgUGYwLnksIFBmMS56KSk7XFxuICBmbG9hdCBuMDExID0gZG90KGcwMTEsIHZlYzMoUGYwLngsIFBmMS55eikpO1xcbiAgZmxvYXQgbjExMSA9IGRvdChnMTExLCBQZjEpO1xcblxcbiAgdmVjMyBmYWRlX3h5eiA9IGZhZGUoUGYwKTtcXG4gIHZlYzQgbl96ID0gbWl4KHZlYzQobjAwMCwgbjEwMCwgbjAxMCwgbjExMCksIHZlYzQobjAwMSwgbjEwMSwgbjAxMSwgbjExMSksIGZhZGVfeHl6LnopO1xcbiAgdmVjMiBuX3l6ID0gbWl4KG5fei54eSwgbl96Lnp3LCBmYWRlX3h5ei55KTtcXG4gIGZsb2F0IG5feHl6ID0gbWl4KG5feXoueCwgbl95ei55LCBmYWRlX3h5ei54KTsgXFxuICByZXR1cm4gMi4yICogbl94eXo7XFxufVxcblxcbmZsb2F0IHNtb290aE1vZChmbG9hdCBheGlzLCBmbG9hdCBhbXAsIGZsb2F0IHJhZCkge1xcbiAgICBmbG9hdCB0b3AgPSBjb3MoUEkgKiAoYXhpcyAvIGFtcCkpICogc2luKFBJICogKGF4aXMgLyBhbXApKTtcXG4gICAgZmxvYXQgYm90dG9tID0gcG93KHNpbihQSSAqIChheGlzIC8gYW1wKSksIDIuMCkgKyBwb3cocmFkLCAyLjApO1xcbiAgICBmbG9hdCBhdCA9IGF0YW4odG9wIC8gYm90dG9tKTtcXG4gICAgcmV0dXJuIGFtcCAqICgxLjAgLyAyLjApIC0gKDEuMCAvIFBJKSAqIGF0O1xcbn1cXG5cXG5mbG9hdCBnZXREaXNwbGFjZW1lbnQodmVjMyBwb3NpdGlvbikge1xcbiAgICB2ZWMzIHBvcyA9IHBvc2l0aW9uO1xcbiAgICBwb3MueSAtPSB1VGltZSAqIDAuMDUgKiB1U3BlZWQ7XFxuICAgIHBvcyArPSBjbm9pc2UocG9zICogMS42NSkgKiB1Tm9pc2VTdHJlbmd0aDtcXG5cXG4gICAgcmV0dXJuIHNtb290aE1vZChwb3MueSAqIHVGcmFjdEFtb3VudCwgMS4sIDEuNSkgKiB1RGlzcGxhY2VtZW50U3RyZW5ndGg7XFxufVxcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdmVjMyBiaVRhbmdlbnQgPSBjcm9zcyhjc21fTm9ybWFsLCB0YW5nZW50Lnh5eik7XFxuICAgIGZsb2F0IHNoaWZ0ID0gMC4wMTtcXG4gICAgdmVjMyBwb3NBID0gY3NtX1Bvc2l0aW9uICsgdGFuZ2VudC54eXogKiBzaGlmdDtcXG4gICAgdmVjMyBwb3NCID0gY3NtX1Bvc2l0aW9uICsgYmlUYW5nZW50ICogc2hpZnQ7XFxuXFxuICAgIGZsb2F0IHBhdHRlcm4gPSBnZXREaXNwbGFjZW1lbnQoY3NtX1Bvc2l0aW9uKTtcXG4gICAgdlBhdHRlcm4gPSBwYXR0ZXJuO1xcblxcbiAgICBjc21fUG9zaXRpb24gKz0gY3NtX05vcm1hbCAqIHBhdHRlcm47XFxuICAgIHBvc0EgKz0gY3NtX05vcm1hbCAqIGdldERpc3BsYWNlbWVudChwb3NBKTtcXG4gICAgcG9zQiArPSBjc21fTm9ybWFsICogZ2V0RGlzcGxhY2VtZW50KHBvc0IpO1xcblxcbiAgICB2ZWMzIHRvQSA9IG5vcm1hbGl6ZShwb3NBIC0gY3NtX1Bvc2l0aW9uKTtcXG4gICAgdmVjMyB0b0IgPSBub3JtYWxpemUocG9zQiAtIGNzbV9Qb3NpdGlvbik7XFxuXFxuICAgIGNzbV9Ob3JtYWwgPSBub3JtYWxpemUoY3Jvc3ModG9BLCB0b0IpKTtcXG59XCI7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiY2UxZjcwNWM1Zjk2MWYyYmFiNDRcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=